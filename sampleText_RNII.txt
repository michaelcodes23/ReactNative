    //use Permissions object, can pass multiple permissions object
    //user has to accept all permissions for this to be true, else false
    const result = await Permissions.askAsync(Permissions.CAMERA_ROLL, Permissions.LOCATION)

    export default function App() {
  console.log('test successful, keep it going!!!')
  const [imageUri, setImageUri] = useState();
  const requestPermission = async () => {

    //request user for permission
    const {granted} = await ImagePicker.requestCameraPermissionsAsync();
    console.log(granted)
    if(!granted) {
      alert('Please enable permission to access the library')
    };
  }
    
  useEffect( () => {
    requestPermission()
    //when using async a promise is explicitly returned, although useEffect 
    //can not return a promise
    //we can only return a function to clean up
    //empty array means code only gets executed once
  }, []);
  const selectImage = async () => {
    //if there is an error, catch it 
    try {
      const result = await ImagePicker.launchImageLibraryAsync();
      //if user doesn't cancel but instead returns an image
      if(!result.cancelled){
        //setImageUri to image selected
        setImageUri(result.uri)
      }
    } catch (error) {
      console.log('Error reading an image', erorr)
    }
    //launch user Library

  }
  return (
      <Screen>
        <Button title= "Select Image" onPress={selectImage} />
        <Image source = {{uri: imageUri}} style = {{width: 200, height: 200}}/>
      </Screen>

  )
}

  const [imageUris, setImageUris] = useState([]);
  const handleAdd = (uri) => {
    //spread operator allows us to push into the setImageUris
    //by setting the imageUris to the array, and what it currently contains
    //plus the new uri
    setImageUris([...imageUris, uri])
  }

  const handleRemove = (uri) => {
    //go through the array and filter out what is in the imageUri except
    //the uri you are trying to remove
    setImageUris(imageUris.filter(imageUri => imageUri !== uri))
  }

-----------Navigation
const Link = () => {
    const navigation = useNavigation();
    return (<Button
      title = 'Click'
      onPress={()=> navigation.navigate("TweetDetails")}
    />)
  }
  const Tweets = ({navigation}) => (
    <Screen>
      <Text>Tweets</Text>
      <Button
        title = 'View Tweet'
        onPress={()=> navigation.navigate("TweetDetails", {id: 1})}
      />
  
    </Screen>
  )
  const TweetDetails = ({route}) => (
    //useRoute hook to gather route
    <Screen>
      <Text>Tweet Details {route.params.id}</Text>
    </Screen>
  )
  const Stack =  createNativeStackNavigator();
  const StackNavigator = () => (
    <Stack.Navigator 
      initialRouteName="Tweets"
      screenOptions={{
        headerStyle: {backgroundColor: 'dodgerblue'},
        headerTintColor: 'white',
        // headerShown: false
      }}
      >
      <Stack.Screen name= "Tweets" component={Tweets}
        // options = {{
        //   headerStyle: {backgroundColor: 'tomato'},
        //   headerTintColor: 'white'
          
        // }}
      />
      <Stack.Screen name= "TweetDetails" component={TweetDetails} />
      
      
    </Stack.Navigator>
  )
  const Tab = createBottomTabNavigator();
  const Account = () => (
    <Screen>
      <Text>Account</Text>
    </Screen>
  )

  const TabNavigator = () => (
    <Tab.Navigator
      
      // tabBarOptions = {{
      //   activeBackgroundColor: 'dodgerblue',
      //   activeTintColor: 'white',
      //   inactiveTintColor: '#eee',
      //   inactiveTintColor: 'black'
      // }}    
    >
      <Tab.Screen 
        screenOptions = {{
          tabBarShowLabel: false
        }}
        name = 'Feed' 
        component = {StackNavigator}
        // options = {{
        // tabBarIcon: ({size , color}) => <MaterialCommunityIcons name = 'home' size = {size} color = {color} />
        // }}
        />
      <Tab.Screen name = 'Account' component = {Account}/>
    </Tab.Navigator>
  )
  return (
    <NavigationContainer>
      <TabNavigator/>
    </NavigationContainer>
  )

  ------API Calls

  const [listings, setListings] = useState([])
    const [error, setError] = useState(false)
    const [loading, setLoading] = useState(false);
    useEffect(() => {
        loadListings();
    }, []);
    
    const loadListings = async () => {
        //story for controlling animation
        setLoading(true)
        const response = await listingsAPI.getListings();
        setLoading(false)
        //story for controlling an error
        if(!response.ok)  return setError(true)
       
        setError(false)
        setListings(response.data);
    }

    ---Checking Connection
  import NetInfo, {useNetInfo} from '@react-native-community/netinfo'
      // NetInfo.fetch().then(netInfo => console.log(netInfo))
  //Class Components
  //componentDidMount
  const unsubscribe = NetInfo.addEventListener(netInfo => console.log(netInfo))
  //componentWillUnmount
  unsubscribe()
  //Function Components
  const netInfo = useNetInfo()
 
  return netInfo.isInternetReachable? <View></View> : console.log('not online')
  //or disable a feature if not connected
  return <Button disabled = {!netInfo.isInternetReachable}/>


  ----Async 

const demo = async ()=> {
    try {
      await AsyncStorage.setItem('person', JSON.stringify({id: 1}))
      const value = await AsyncStorage.getItem('person')
      const person = JSON.parse(value)
      console.log(person)
    } catch (error) {
      console.log(error);
    }
  }
  demo()